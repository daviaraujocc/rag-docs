# Global settings
nameOverride: ""
fullnameOverride: ""

# Common labels
commonLabels: {}

# Common annotations
commonAnnotations: {}

# Image pull secrets
imagePullSecrets: []

# Node selector
nodeSelector: {}

# Tolerations
tolerations: []

# Affinity
affinity: {}

# Default resource settings
resources:
  limits:
    cpu: 500m
    memory: 512Mi
  requests:
    cpu: 100m
    memory: 256Mi

# UI Service configuration
ui:
  enabled: true
  name: ui
  replicaCount: 1
  
  image:
    repository: david13356/rag-docs-ui
    pullPolicy: IfNotPresent
    tag: "latest"
  
  service:
    type: ClusterIP
    port: 3000
    annotations: {}
  
  resources:
    limits:
      cpu: 500m
      memory: 512Mi
    requests:
      cpu: 100m
      memory: 256Mi
  
  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 5
    targetCPUUtilizationPercentage: 80
    targetMemoryUtilizationPercentage: 80
  
  podAnnotations: {}
  podSecurityContext: {}
  securityContext: {}
  
  env:
    RETRIEVER_API_URL: "http://rag-docs-retriever:6000"
    S3_ENDPOINT: "http://rag-docs-minio:9000"
    S3_PUBLIC_URL: "http://localhost:9000"
    MINIO_BUCKET: "documents"
    SIMILARITY_THRESHOLD: "0.25"
    PRESIGNED_URL_EXPIRATION: "3600"
    LLM_PROVIDER: "openai" 
    OPENAI_API_BASE: "https://api.openai.com/v1/"
    OPENAI_API_KEY: ""
    #OPENAI_MODEL: "gpt-3.5-turbo"

# Retriever Service configuration
retriever:
  enabled: true
  name: retriever
  replicaCount: 1
  
  image:
    repository: david13356/rag-docs-retriever
    pullPolicy: IfNotPresent
    tag: "latest"
  
  service:
    type: ClusterIP
    port: 6000
    annotations: {}
  
  resources:
    limits:
      cpu: 1000m
      memory: 1Gi
    requests:
      cpu: 200m
      memory: 512Mi
  
  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 5
    targetCPUUtilizationPercentage: 80
    targetMemoryUtilizationPercentage: 80
  
  podAnnotations: {}
  podSecurityContext: {}
  securityContext: {}
  
  env:
    PORT: "6000"

# Embedder Service configuration
embedder:
  enabled: true
  name: embedder
  replicaCount: 1
  
  image:
    repository: david13356/rag-docs-embedder
    pullPolicy: IfNotPresent
    tag: "latest"
  
  service:
    type: ClusterIP
    port: 5000
    annotations: {}
  
  resources:
    limits:
      cpu: 1000m
      memory: 2Gi
    requests:
      cpu: 200m
      memory: 1Gi
  
  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 5
    targetCPUUtilizationPercentage: 80
    targetMemoryUtilizationPercentage: 80
  
  podAnnotations: {}
  podSecurityContext: {}
  securityContext: {}
  
  env:
    MINIO_SECURE: "false"

# PostgreSQL configuration
postgres:
  enabled: true
  name: postgres
  
  image:
    repository: pgvector/pgvector
    tag: "pg16"
    pullPolicy: IfNotPresent
  
  service:
    port: 5432
    type: ClusterIP
    annotations: {}
  
  resources:
    limits:
      cpu: 1000m
      memory: 2Gi
    requests:
      cpu: 200m
      memory: 1Gi
  
  persistence:
    enabled: true
    size: 10Gi
    storageClass: ""
    annotations: {}
  
  env:
    POSTGRES_USER: "postgres"
    POSTGRES_PASSWORD: "postgres"
    POSTGRES_DB: "rag-docs"
  
  args: ["-c", "shared_preload_libraries=vector"]
  
  initdbScripts:
    init_db.sql: |
      CREATE DATABASE "rag-docs";
      \c rag-docs
      
      CREATE EXTENSION IF NOT EXISTS vector WITH SCHEMA public;
      
      CREATE SEQUENCE IF NOT EXISTS public.data_llamaindex_id_seq
          START WITH 1
          INCREMENT BY 1
          NO MINVALUE
          NO MAXVALUE
          CACHE 1;
      
      CREATE TABLE IF NOT EXISTS public.data_llamaindex (
          id bigint NOT NULL DEFAULT nextval('public.data_llamaindex_id_seq'::regclass),
          text character varying NOT NULL,
          metadata_ json,
          node_id character varying,
          embedding public.vector(384)
      );
      
      CREATE UNIQUE INDEX IF NOT EXISTS data_llamaindex_pkey ON public.data_llamaindex USING btree (id);

# Ollama configuration
ollama:
  enabled: false

# Create Buckets Job configuration
createbuckets:
  enabled: true
  name: createbuckets
  
  image:
    repository: minio/mc
    tag: "latest"
    pullPolicy: IfNotPresent
  
  resources:
    limits:
      cpu: 200m
      memory: 256Mi
    requests:
      cpu: 100m
      memory: 128Mi
  
  env:
    MINIO_SERVER: "rag-docs-minio:9000"
    MINIO_USER: "minioadmin"
    MINIO_PASSWORD: "minioadmin"
    BUCKET_NAME: "documents"
    WEBHOOK_ENDPOINT: "http://rag-docs-embedder:5000/minio-event"

# Common database configuration
database:
  connectionString: "postgresql://$(POSTGRES_USER):$(POSTGRES_PASSWORD)@rag-docs-postgres:5432/rag-docs"

# MinIO dependency configuration
minio:
  enabled: true
  mode: standalone
  rootUser: "minioadmin"
  rootPassword: "minioadmin"
  persistence:
    enabled: true
    size: 10Gi
  resources:
    requests:
      memory: 512Mi
      cpu: 250m
  service:
    type: ClusterIP
    port: 9000
  consoleService:
    type: ClusterIP
    port: 9001
  environment:
    MINIO_NOTIFY_WEBHOOK_ENABLE_EMBEDDER: "on"
    MINIO_NOTIFY_WEBHOOK_ENDPOINT_EMBEDDER: "http://rag-docs-embedder:5000/minio-event"

# Ingress configuration
ingress:
  enabled: false
  className: ""
  annotations: {}
  hosts:
    - host: ragdocs.local
      paths:
        - path: /
          pathType: Prefix
          service: ui
          port: 3000
  tls: []
